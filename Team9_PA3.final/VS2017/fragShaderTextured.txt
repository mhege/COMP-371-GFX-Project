 #version 330 core
	out vec4 FragColor;
 
    in vec3 vertexColor;
    in vec2 vertexUV;
	in vec3 Normal;
	in vec3 FragPos;
	
    uniform sampler2D textureSampler;
    uniform vec3 lightPos1;
	uniform vec3 lightPos2;
	uniform vec3 lightColor;
	uniform vec3 viewPos1;
    uniform vec3 viewPos2;
	uniform vec3 light_direction1;
	uniform vec3 light_direction2;
	uniform float light_cutoff;
	uniform int lightOff;
    void main()
    {
        vec3 lightDir1 = normalize(lightPos1 - FragPos);
		vec3 lightDir2 = normalize(lightPos2 - FragPos);
		float theta = dot(lightDir1, normalize(-light_direction1));
		float theta2 = dot(lightDir2, normalize(-light_direction2));
	
        vec4 textureColor = texture( textureSampler, vertexUV );
		
		if(lightOff == 1){
		
	if((theta > light_cutoff) && (theta2 > light_cutoff)) 
    {     
        //Ambient
	    float ambientStrength = 0.1f;
		vec3 ambient = ambientStrength * lightColor;
			
		//Diffuse1
		vec3 norm = normalize(Normal);
		float diff = max(dot(norm, lightDir1), 0.0);
		vec3 diffuse =  diff * lightColor;
			
		//Diffuse2
		
		float diff2 = max(dot(norm, lightDir2), 0.0);
		vec3 diffuse2 =  diff2 * lightColor;
			
		//specular
		float specularStrength = 1.0f;
		vec3 viewDir = normalize(viewPos1 - FragPos);
		vec3 reflectDir = reflect(-lightDir1, norm);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
		vec3 specular = specularStrength * spec * lightColor; 
		
		//specular 2
		//float specularStrength = 1.0f;
		vec3 viewDir2 = normalize(viewPos2 - FragPos);
		vec3 reflectDir2 = reflect(-lightDir2, norm);  
		float spec2 = pow(max(dot(viewDir2, reflectDir2), 0.0), 32);
		vec3 specular2 =  specularStrength * spec2 * lightColor; 
		
		
		vec4 result = vec4((ambient +  diffuse + .25*diffuse2 + specular + .25*specular2),1.0)*textureColor;
		FragColor = result;
	}else if((theta > light_cutoff) && !(theta2 > light_cutoff)){
		//Ambient
	    float ambientStrength = 0.1f;
		vec3 ambient = ambientStrength * lightColor;
			
		//Diffuse1
		vec3 norm = normalize(Normal);
		float diff = max(dot(norm, lightDir1), 0.0);
		vec3 diffuse =  diff * lightColor;
			
		//specular
		float specularStrength = 1.0f;
		vec3 viewDir = normalize(viewPos1 - FragPos);
		vec3 reflectDir = reflect(-lightDir1, norm);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
		vec3 specular = specularStrength * spec * lightColor; 
		
		vec4 result = vec4((ambient +  diffuse + specular),1.0)*textureColor;
		FragColor = result;
	}else if((theta2 > light_cutoff) && !(theta > light_cutoff)){
		//Ambient
	    float ambientStrength = 0.1f;
		vec3 ambient = ambientStrength * lightColor;
			
		vec3 norm = normalize(Normal);
		
		//Diffuse2
		float diff2 = max(dot(norm, lightDir2), 0.0);
		vec3 diffuse2 =  diff2 * lightColor;
			
		float specularStrength = 1.0f;
		 
		//specular 2
		//float specularStrength = 1.0f;
		vec3 viewDir2 = normalize(viewPos2 - FragPos);
		vec3 reflectDir2 = reflect(-lightDir2, norm);  
		float spec2 = pow(max(dot(viewDir2, reflectDir2), 0.0), 32);
		vec3 specular2 =  specularStrength * spec2 * lightColor; 
		
		
		vec4 result = vec4((ambient + diffuse2 + specular2),1.0)*textureColor;
		FragColor = result;
	}else{
		float ambientStrength = 0.5f;
		vec3 ambient = ambientStrength * lightColor;
		vec4 result = vec4((ambient),1.0)*textureColor;
		FragColor = result;
	}
	}else{
		float ambientStrength = 0.5f;
		vec3 ambient = ambientStrength * lightColor;
		vec4 result = vec4((ambient),1.0)*textureColor;
		FragColor = result;
	}
	
    }