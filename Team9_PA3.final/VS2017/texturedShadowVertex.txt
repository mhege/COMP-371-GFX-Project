#version 330 core
    layout (location = 0) in vec3 aPos;
    layout (location = 1) in vec3 aColor;
    layout (location = 2) in vec3 normal;
    layout (location = 3) in vec2 aUV;
    
    uniform mat4 worldMatrix;
    uniform mat4 viewMatrix = mat4(1.0);
    uniform mat4 projectionMatrix = mat4(1.0);
    uniform mat4 light_view_proj_matrix1;
	uniform mat4 light_view_proj_matrix2;
	uniform mat4 light_view_proj_matrix3;
	uniform mat4 light_view_proj_matrix4;
	uniform mat4 light_view_proj_matrix5;
	uniform mat4 light_view_proj_matrix6;

    out vec3 vertexColor;
    out vec3 Normal;
    out vec2 vertexUV;
    out vec3 FragPos;
    
    out vec3 fragment_normal;
    out vec4 fragment_position_light_space1;
	out vec4 fragment_position_light_space2;   
	out vec4 fragment_position_light_space3;
	out vec4 fragment_position_light_space4;
	out vec4 fragment_position_light_space5;
	out vec4 fragment_position_light_space6;


    void main()
    {
      fragment_normal = mat3(worldMatrix) * normal;
      vertexColor = aColor;
      mat4 modelViewProjection = projectionMatrix * viewMatrix * worldMatrix;
      gl_Position = modelViewProjection * vec4(aPos.x, aPos.y, aPos.z, 1.0);
      FragPos = vec3( worldMatrix * vec4(aPos, 1.0f));
      fragment_position_light_space1 = light_view_proj_matrix1 * vec4(FragPos, 1.0);  
	  fragment_position_light_space2 = light_view_proj_matrix2 * vec4(FragPos, 1.0); 
	  fragment_position_light_space3 = light_view_proj_matrix3 * vec4(FragPos, 1.0); 
	  fragment_position_light_space4 = light_view_proj_matrix4 * vec4(FragPos, 1.0); 
	  fragment_position_light_space5 = light_view_proj_matrix5 * vec4(FragPos, 1.0); 
	  fragment_position_light_space6 = light_view_proj_matrix6 * vec4(FragPos, 1.0); 
      Normal = mat3(transpose(inverse(worldMatrix))) * normal;
      vertexUV = aUV;
    }