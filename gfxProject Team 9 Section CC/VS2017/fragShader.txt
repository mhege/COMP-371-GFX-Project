#version 330 core
		const float PI = 3.1415926535897932384626433832795;

		out vec4 FragColor;

		in vec3 vertexColor;
		in vec3 Normal;
		in vec3 FragPos;
		
        in vec4 fragment_position_light_space;
        in vec3 fragment_normal;
		
		uniform vec3 lightPos;
		uniform vec3 lightColor;
		uniform vec3 light_direction;
		uniform float light_near_plane;
		uniform float light_far_plane;
		uniform float light_cutoff_outer;
		uniform float light_cutoff_inner;
		
		uniform vec3 viewPos;
		
		uniform sampler2D shadow_map;
		
		float shadow_scalar() {
		// this function returns 1.0 when the surface receives light, and 0.0 when it is in a shadow
        // perform perspective divide
        vec3 normalized_device_coordinates = fragment_position_light_space.xyz / fragment_position_light_space.w;
        // transform to [0,1] range
        normalized_device_coordinates = normalized_device_coordinates * 0.5 + 0.5;
        // get closest depth value from light's perspective (using [0,1] range fragment_position_light_space as coords)
        float closest_depth = texture(shadow_map, normalized_device_coordinates.xy).r;
        // get depth of current fragment from light's perspective
        float current_depth = normalized_device_coordinates.z;
        // check whether current frag pos is in shadow
        float bias = 0;  // bias applied in depth map: see shadow_vertex.glsl
        return ((current_depth - bias) < closest_depth) ? 1.0 : 0.0;
        }
		
		float spotlight_scalar() {
			float theta = dot(normalize(FragPos - lightPos), light_direction);
    
			if(theta > light_cutoff_inner) {
				return 1.0;
			} else if(theta > light_cutoff_outer) {
				return (1.0 - cos(PI * (theta - light_cutoff_outer) / (light_cutoff_inner - light_cutoff_outer))) / 2.0;
			} else {
				return 0.0;
			}
		}
		
		void main()
		{
			
			float scalar = shadow_scalar()*spotlight_scalar();
			
			//Ambient
			float ambientStrength = 0.1f;
			vec3 ambient = ambientStrength * lightColor;
			
			//Diffuse
			vec3 norm = normalize(Normal);
			vec3 lightDir = normalize(lightPos - FragPos);
			float diff = max(dot(norm, lightDir), 0.0);
			vec3 diffuse = scalar * diff * lightColor;
			
			//specular
			float specularStrength = 1.0f;
			vec3 viewDir = normalize(viewPos - FragPos);
			vec3 reflectDir = reflect(-lightDir, norm);  
			float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
			vec3 specular = scalar*specularStrength * spec * lightColor; 
			
			vec3 result = (ambient + diffuse + specular) * vertexColor;
			FragColor = vec4(result, 1.0f);
		}