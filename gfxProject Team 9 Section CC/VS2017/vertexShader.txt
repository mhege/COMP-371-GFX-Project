#version 330 core
		layout (location = 0) in vec3 aPos;
		layout (location = 1) in vec3 aColor;
		layout (location = 2) in vec3 normal;
		
		uniform mat4 worldMatrix;
		uniform mat4 viewMatrix = mat4(1.0);
		uniform mat4 projectionMatrix = mat4(1.0);
		uniform mat4 light_view_proj_matrix;
		
		
		out vec3 vertexColor;
		out vec3 Normal;
		out vec3 FragPos;
		
		out vec3 fragment_normal;
		out vec4 fragment_position_light_space;
		
		void main()
		{
		  fragment_normal = mat3(worldMatrix) * normal;
		  vertexColor = aColor;
		  mat4 modelViewProjection = projectionMatrix * viewMatrix * worldMatrix;
		  gl_Position = modelViewProjection*vec4(aPos.x, aPos.y, aPos.z, 1.0);
		  FragPos = vec3( worldMatrix * vec4(aPos, 1.0f));
		  fragment_position_light_space = light_view_proj_matrix * vec4(FragPos, 1.0);
		  Normal = mat3(transpose(inverse(worldMatrix))) * normal;
		}